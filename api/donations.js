// api/donations.js
export default async function handler(req, res) {
    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS
    res.setHeader('Access-Control-Allow-Origin', '*');
    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS');
    res.setHeader('Access-Control-Allow-Headers', 'Content-Type');
    
    if (req.method === 'OPTIONS') {
        return res.status(200).end();
    }

    try {
        console.log('üîÑ API endpoint called');
        console.log('Environment variables check:');
        console.log('DA_ACCESS_TOKEN exists:', !!process.env.DA_ACCESS_TOKEN);
        
        const daToken = process.env.DA_ACCESS_TOKEN;
        
        if (!daToken) {
            console.error('‚ùå DA_ACCESS_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return res.status(500).json({ 
                error: 'DA_ACCESS_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –î–æ–±–∞–≤—å—Ç–µ –µ–≥–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö Vercel.',
                items: [
                    { icon: '‚ö†Ô∏è', text: '–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω' },
                    { icon: 'üîß', text: '–î–æ–±–∞–≤—å—Ç–µ DA_ACCESS_TOKEN –≤ Vercel' }
                ]
            });
        }

        console.log('üì° Fetching donations from DonationAlerts...');
        console.log('Token length:', daToken.length);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º fetch –≤–º–µ—Å—Ç–æ axios (–≤—Å—Ç—Ä–æ–µ–Ω –≤ Node.js 18+)
        const response = await fetch('https://www.donationalerts.com/api/v1/alerts/donations?limit=20', {
            headers: {
                'Authorization': `Bearer ${daToken}`,
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        });

        console.log('API Response status:', response.status);
        
        if (!response.ok) {
            const errorText = await response.text();
            console.error('‚ùå DonationAlerts API error:', response.status, errorText);
            
            return res.status(500).json({
                error: `DonationAlerts API –æ—à–∏–±–∫–∞: ${response.status}`,
                items: [
                    { icon: '‚ùå', text: `API –æ—à–∏–±–∫–∞ ${response.status}` },
                    { icon: 'üîë', text: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –¥–æ—Å—Ç—É–ø–∞' }
                ]
            });
        }

        const data = await response.json();
        console.log('‚úÖ API data received, donations count:', data.data?.length || 0);

        if (!data.data || !Array.isArray(data.data)) {
            console.error('‚ùå Unexpected API response format:', data);
            return res.status(500).json({
                error: '–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞ API',
                items: [
                    { icon: 'üìä', text: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö' }
                ]
            });
        }

        // –§–∏–ª—å—Ç—Ä—É–µ–º –¥–æ–Ω–∞—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
        const weekAgo = Date.now() - 7 * 24 * 60 * 60 * 1000;
        
        const donors = Object.values(
            data.data
                .filter(d => {
                    const donationDate = new Date(d.created_at);
                    return donationDate.getTime() >= weekAgo;
                })
                .reduce((acc, { username, amount, currency }) => {
                    const numAmount = parseFloat(amount) || 0;
                    const cleanUsername = username || '–ê–Ω–æ–Ω–∏–º';
                    
                    if (!acc[cleanUsername]) {
                        acc[cleanUsername] = { 
                            icon: 'üí∞', 
                            text: `${cleanUsername} ‚Äî ${numAmount.toFixed(0)} ${currency}`, 
                            total: numAmount 
                        };
                    } else {
                        acc[cleanUsername].total += numAmount;
                        acc[cleanUsername].text = `${cleanUsername} ‚Äî ${acc[cleanUsername].total.toFixed(0)} ${currency}`;
                    }
                    return acc;
                }, {})
        ).sort((a, b) => b.total - a.total);

        console.log(`‚úÖ Processed ${donors.length} unique donors this week`);
        
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–æ–Ω–∞—Ç–æ–≤, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (donors.length === 0) {
            return res.status(200).json({ 
                items: [
                    { icon: '‚è≥', text: '–ù–µ—Ç –¥–æ–Ω–∞—Ç–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é' },
                    { icon: 'üí´', text: '–û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–æ–Ω–∞—Ç–æ–≤...' }
                ]
            });
        }
        
        return res.status(200).json({ items: donors });
        
    } catch (error) {
        console.error('‚ùå Server error:', error);
        return res.status(500).json({ 
            error: error.message,
            items: [
                { icon: 'üö®', text: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' },
                { icon: 'üîß', text: '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ Vercel' }
            ]
        });
    }
}
